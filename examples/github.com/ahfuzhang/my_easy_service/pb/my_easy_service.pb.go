// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: my_easy_service.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/ahfuzhang/cheaprpc/proto/public"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MyDefines int32

const (
	MyDefines_NotUse MyDefines = 0
	MyDefines_Yes    MyDefines = 1
	MyDefines_No     MyDefines = 2
)

var MyDefines_name = map[int32]string{
	0: "NotUse",
	1: "Yes",
	2: "No",
}

var MyDefines_value = map[string]int32{
	"NotUse": 0,
	"Yes":    1,
	"No":     2,
}

func (x MyDefines) String() string {
	return proto.EnumName(MyDefines_name, int32(x))
}

func (MyDefines) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_52e5661002f79169, []int{0}
}

type GetReq struct {
	Any       string    `protobuf:"bytes,1,opt,name=any,proto3" json:"json_any"`
	EnumValue MyDefines `protobuf:"varint,2,opt,name=enum_value,json=enumValue,proto3,enum=cheaprpc.ahfuzhang.my_easy_service.MyDefines" json:"enum_value,omitempty"`
	ID        int64     `protobuf:"varint,3,opt,name=id,proto3" json:"json_id,string" gorm:"field_id" yaml:"yaml_id"`
}

func (m *GetReq) Reset()         { *m = GetReq{} }
func (m *GetReq) String() string { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()    {}
func (*GetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e5661002f79169, []int{0}
}
func (m *GetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReq.Merge(m, src)
}
func (m *GetReq) XXX_Size() int {
	return m.Size()
}
func (m *GetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReq proto.InternalMessageInfo

func (m *GetReq) GetAny() string {
	if m != nil {
		return m.Any
	}
	return ""
}

func (m *GetReq) GetEnumValue() MyDefines {
	if m != nil {
		return m.EnumValue
	}
	return MyDefines_NotUse
}

func (m *GetReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type GetRsp struct {
	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	BizData string `protobuf:"bytes,3,opt,name=biz_data,json=bizData,proto3" json:"biz_data,omitempty"`
}

func (m *GetRsp) Reset()         { *m = GetRsp{} }
func (m *GetRsp) String() string { return proto.CompactTextString(m) }
func (*GetRsp) ProtoMessage()    {}
func (*GetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e5661002f79169, []int{1}
}
func (m *GetRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRsp.Merge(m, src)
}
func (m *GetRsp) XXX_Size() int {
	return m.Size()
}
func (m *GetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRsp proto.InternalMessageInfo

func (m *GetRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GetRsp) GetBizData() string {
	if m != nil {
		return m.BizData
	}
	return ""
}

type SaveReq struct {
	Value1 string `protobuf:"bytes,1,opt,name=value1,proto3" json:"value1,omitempty"`
	Value2 string `protobuf:"bytes,2,opt,name=value2,proto3" json:"value2,omitempty"`
}

func (m *SaveReq) Reset()         { *m = SaveReq{} }
func (m *SaveReq) String() string { return proto.CompactTextString(m) }
func (*SaveReq) ProtoMessage()    {}
func (*SaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e5661002f79169, []int{2}
}
func (m *SaveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveReq.Merge(m, src)
}
func (m *SaveReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveReq proto.InternalMessageInfo

func (m *SaveReq) GetValue1() string {
	if m != nil {
		return m.Value1
	}
	return ""
}

func (m *SaveReq) GetValue2() string {
	if m != nil {
		return m.Value2
	}
	return ""
}

type SaveRsp struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SaveRsp) Reset()         { *m = SaveRsp{} }
func (m *SaveRsp) String() string { return proto.CompactTextString(m) }
func (*SaveRsp) ProtoMessage()    {}
func (*SaveRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_52e5661002f79169, []int{3}
}
func (m *SaveRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveRsp.Merge(m, src)
}
func (m *SaveRsp) XXX_Size() int {
	return m.Size()
}
func (m *SaveRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveRsp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveRsp proto.InternalMessageInfo

func (m *SaveRsp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SaveRsp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterEnum("cheaprpc.ahfuzhang.my_easy_service.MyDefines", MyDefines_name, MyDefines_value)
	proto.RegisterType((*GetReq)(nil), "cheaprpc.ahfuzhang.my_easy_service.GetReq")
	proto.RegisterType((*GetRsp)(nil), "cheaprpc.ahfuzhang.my_easy_service.GetRsp")
	proto.RegisterType((*SaveReq)(nil), "cheaprpc.ahfuzhang.my_easy_service.SaveReq")
	proto.RegisterType((*SaveRsp)(nil), "cheaprpc.ahfuzhang.my_easy_service.SaveRsp")
}

func init() { proto.RegisterFile("my_easy_service.proto", fileDescriptor_52e5661002f79169) }

var fileDescriptor_52e5661002f79169 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x53, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xce, 0x39, 0x25, 0x6d, 0x0e, 0x88, 0xa2, 0x93, 0x40, 0x69, 0x06, 0x27, 0xf2, 0x42, 0x54,
	0xa8, 0x2d, 0xc2, 0x44, 0x98, 0x88, 0x52, 0x55, 0x41, 0xb4, 0x83, 0x2b, 0x90, 0x60, 0x31, 0x67,
	0xfb, 0xc5, 0x3e, 0x14, 0xfb, 0x5c, 0xdf, 0x39, 0xc2, 0x19, 0x91, 0xd8, 0x11, 0x7f, 0x12, 0x13,
	0x63, 0x47, 0xa6, 0x08, 0x25, 0x5b, 0x47, 0x36, 0x98, 0x90, 0x7f, 0x10, 0xa0, 0x42, 0xc2, 0x3b,
	0x8b, 0xf5, 0x9e, 0xef, 0xfb, 0xbe, 0xf7, 0xbe, 0xef, 0x74, 0xf8, 0x56, 0x90, 0x5a, 0x40, 0x45,
	0x6a, 0x09, 0x88, 0x17, 0xcc, 0x01, 0x3d, 0x8a, 0xb9, 0xe4, 0x44, 0x73, 0x7c, 0xa0, 0x51, 0x1c,
	0x39, 0x3a, 0xf5, 0x67, 0xc9, 0xd2, 0xa7, 0xa1, 0xa7, 0x5f, 0x41, 0x76, 0xfb, 0x1e, 0xe7, 0xde,
	0x1c, 0x8c, 0x9c, 0x61, 0x27, 0x33, 0xc3, 0x05, 0xe1, 0xc4, 0x2c, 0x92, 0x3c, 0x2e, 0x54, 0xba,
	0x87, 0x1e, 0x93, 0x7e, 0x62, 0xeb, 0x0e, 0x0f, 0x0c, 0x8f, 0x7b, 0xfc, 0x17, 0x34, 0xeb, 0xf2,
	0x26, 0xaf, 0x4a, 0xf8, 0xa3, 0xdf, 0xe0, 0xdb, 0xb1, 0xc6, 0xcf, 0x4d, 0x0a, 0xb2, 0x11, 0x25,
	0xf6, 0x9c, 0x39, 0x06, 0xbc, 0x91, 0x10, 0x0a, 0xc6, 0x43, 0x51, 0x90, 0xb5, 0x8f, 0x08, 0x37,
	0x8e, 0x41, 0x9a, 0x70, 0x4e, 0x54, 0x5c, 0xa7, 0x61, 0xda, 0x41, 0x7d, 0x34, 0x68, 0x8e, 0x6f,
	0x5c, 0xae, 0x7a, 0x7b, 0xaf, 0x05, 0x0f, 0x2d, 0x1a, 0xa6, 0x66, 0x76, 0x40, 0x9e, 0x62, 0x0c,
	0x61, 0x12, 0x58, 0x0b, 0x3a, 0x4f, 0xa0, 0xa3, 0xf4, 0xd1, 0xa0, 0x35, 0x3c, 0xd4, 0xff, 0xed,
	0x58, 0x3f, 0x49, 0x27, 0x30, 0x63, 0x21, 0x08, 0xb3, 0x99, 0x09, 0x3c, 0xcf, 0xf8, 0xe4, 0x09,
	0x56, 0x98, 0xdb, 0xa9, 0xf7, 0xd1, 0xa0, 0x3e, 0x1e, 0xad, 0x57, 0x3d, 0x65, 0x3a, 0xb9, 0x5c,
	0xf5, 0x5a, 0xf9, 0x48, 0xe6, 0xde, 0x13, 0x32, 0x66, 0xa1, 0xf7, 0x75, 0xd5, 0x53, 0x3d, 0x1e,
	0x07, 0x23, 0x6d, 0xc6, 0x60, 0xee, 0x5a, 0xcc, 0xd5, 0xfa, 0x29, 0x0d, 0xe6, 0x23, 0x2d, 0xfb,
	0x66, 0xad, 0xa9, 0x30, 0x57, 0x9b, 0x16, 0x1e, 0x44, 0x44, 0x08, 0xde, 0x71, 0xb8, 0x0b, 0xb9,
	0x89, 0x6b, 0x66, 0x5e, 0x93, 0x36, 0xae, 0x07, 0xc2, 0xcb, 0x17, 0x6e, 0x9a, 0x59, 0x49, 0xf6,
	0xf1, 0x9e, 0xcd, 0x96, 0x96, 0x4b, 0x25, 0xcd, 0x37, 0x68, 0x9a, 0xbb, 0x36, 0x5b, 0x4e, 0xa8,
	0xa4, 0xda, 0x43, 0xbc, 0x7b, 0x46, 0x17, 0x90, 0xe5, 0x71, 0x1b, 0x37, 0x72, 0xab, 0xf7, 0x8b,
	0x48, 0xcc, 0xb2, 0xdb, 0xfe, 0x1f, 0x96, 0x92, 0x65, 0xa7, 0x19, 0x25, 0xb5, 0xea, 0x1a, 0x07,
	0x03, 0xdc, 0xdc, 0x46, 0x43, 0x30, 0x6e, 0x9c, 0x72, 0xf9, 0x4c, 0x40, 0xbb, 0x46, 0x76, 0x71,
	0xfd, 0x05, 0x88, 0x36, 0x22, 0x0d, 0xac, 0x9c, 0xf2, 0xb6, 0x32, 0xfc, 0x86, 0xf0, 0xcd, 0x93,
	0xf4, 0x88, 0x8a, 0xf4, 0xac, 0xc8, 0x94, 0xbc, 0x43, 0xf8, 0xfa, 0x31, 0xc8, 0x23, 0xc7, 0xe7,
	0xd3, 0x70, 0xc6, 0xc9, 0x41, 0x95, 0x8b, 0x28, 0x2e, 0xba, 0x5b, 0x19, 0x2b, 0x22, 0x4d, 0xfd,
	0xf0, 0x76, 0xbf, 0xeb, 0x4b, 0x19, 0x19, 0x31, 0x9c, 0x27, 0x20, 0xa4, 0xe1, 0x81, 0xb4, 0xc0,
	0xf1, 0xb9, 0xc5, 0xb2, 0xb9, 0xaf, 0xf0, 0x4e, 0x66, 0x9a, 0xdc, 0xad, 0xa2, 0x59, 0x26, 0xdb,
	0xad, 0x0e, 0x16, 0xd1, 0xf0, 0x3b, 0xc2, 0xad, 0x3f, 0xbc, 0x0f, 0xff, 0x1f, 0xf3, 0xe3, 0xc7,
	0x9f, 0xd6, 0x2a, 0xba, 0x58, 0xab, 0xe8, 0xcb, 0x5a, 0x45, 0xef, 0x37, 0x6a, 0xed, 0x62, 0xa3,
	0xd6, 0x3e, 0x6f, 0xd4, 0xda, 0xcb, 0x3b, 0x7f, 0x7d, 0xf5, 0x57, 0x74, 0x8c, 0xc8, 0xb6, 0x1b,
	0xf9, 0x43, 0x7f, 0xf0, 0x23, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x4e, 0x6a, 0xa5, 0xb3, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyEasyServiceClient is the client API for MyEasyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyEasyServiceClient interface {
	GetEchoInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	Save(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*SaveRsp, error)
}

type myEasyServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyEasyServiceClient(cc *grpc.ClientConn) MyEasyServiceClient {
	return &myEasyServiceClient{cc}
}

func (c *myEasyServiceClient) GetEchoInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService/GetEchoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myEasyServiceClient) Save(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*SaveRsp, error) {
	out := new(SaveRsp)
	err := c.cc.Invoke(ctx, "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyEasyServiceServer is the server API for MyEasyService service.
type MyEasyServiceServer interface {
	GetEchoInfo(context.Context, *GetReq) (*GetRsp, error)
	Save(context.Context, *SaveReq) (*SaveRsp, error)
}

// UnimplementedMyEasyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMyEasyServiceServer struct {
}

func (*UnimplementedMyEasyServiceServer) GetEchoInfo(ctx context.Context, req *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEchoInfo not implemented")
}
func (*UnimplementedMyEasyServiceServer) Save(ctx context.Context, req *SaveReq) (*SaveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}

func RegisterMyEasyServiceServer(s *grpc.Server, srv MyEasyServiceServer) {
	s.RegisterService(&_MyEasyService_serviceDesc, srv)
}

func _MyEasyService_GetEchoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyEasyServiceServer).GetEchoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService/GetEchoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyEasyServiceServer).GetEchoInfo(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyEasyService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyEasyServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyEasyServiceServer).Save(ctx, req.(*SaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyEasyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheaprpc.ahfuzhang.my_easy_service.MyEasyService",
	HandlerType: (*MyEasyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEchoInfo",
			Handler:    _MyEasyService_GetEchoInfo_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _MyEasyService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "my_easy_service.proto",
}

// MyEasyService2Client is the client API for MyEasyService2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyEasyService2Client interface {
	GetEchoInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	Save(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*SaveRsp, error)
}

type myEasyService2Client struct {
	cc *grpc.ClientConn
}

func NewMyEasyService2Client(cc *grpc.ClientConn) MyEasyService2Client {
	return &myEasyService2Client{cc}
}

func (c *myEasyService2Client) GetEchoInfo(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService2/GetEchoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myEasyService2Client) Save(ctx context.Context, in *SaveReq, opts ...grpc.CallOption) (*SaveRsp, error) {
	out := new(SaveRsp)
	err := c.cc.Invoke(ctx, "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService2/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyEasyService2Server is the server API for MyEasyService2 service.
type MyEasyService2Server interface {
	GetEchoInfo(context.Context, *GetReq) (*GetRsp, error)
	Save(context.Context, *SaveReq) (*SaveRsp, error)
}

// UnimplementedMyEasyService2Server can be embedded to have forward compatible implementations.
type UnimplementedMyEasyService2Server struct {
}

func (*UnimplementedMyEasyService2Server) GetEchoInfo(ctx context.Context, req *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEchoInfo not implemented")
}
func (*UnimplementedMyEasyService2Server) Save(ctx context.Context, req *SaveReq) (*SaveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}

func RegisterMyEasyService2Server(s *grpc.Server, srv MyEasyService2Server) {
	s.RegisterService(&_MyEasyService2_serviceDesc, srv)
}

func _MyEasyService2_GetEchoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyEasyService2Server).GetEchoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService2/GetEchoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyEasyService2Server).GetEchoInfo(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyEasyService2_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyEasyService2Server).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheaprpc.ahfuzhang.my_easy_service.MyEasyService2/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyEasyService2Server).Save(ctx, req.(*SaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MyEasyService2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheaprpc.ahfuzhang.my_easy_service.MyEasyService2",
	HandlerType: (*MyEasyService2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEchoInfo",
			Handler:    _MyEasyService2_GetEchoInfo_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _MyEasyService2_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "my_easy_service.proto",
}

func (m *GetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintMyEasyService(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x18
	}
	if m.EnumValue != 0 {
		i = encodeVarintMyEasyService(dAtA, i, uint64(m.EnumValue))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Any) > 0 {
		i -= len(m.Any)
		copy(dAtA[i:], m.Any)
		i = encodeVarintMyEasyService(dAtA, i, uint64(len(m.Any)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BizData) > 0 {
		i -= len(m.BizData)
		copy(dAtA[i:], m.BizData)
		i = encodeVarintMyEasyService(dAtA, i, uint64(len(m.BizData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMyEasyService(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintMyEasyService(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value2) > 0 {
		i -= len(m.Value2)
		copy(dAtA[i:], m.Value2)
		i = encodeVarintMyEasyService(dAtA, i, uint64(len(m.Value2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value1) > 0 {
		i -= len(m.Value1)
		copy(dAtA[i:], m.Value1)
		i = encodeVarintMyEasyService(dAtA, i, uint64(len(m.Value1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMyEasyService(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintMyEasyService(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMyEasyService(dAtA []byte, offset int, v uint64) int {
	offset -= sovMyEasyService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Any)
	if l > 0 {
		n += 1 + l + sovMyEasyService(uint64(l))
	}
	if m.EnumValue != 0 {
		n += 1 + sovMyEasyService(uint64(m.EnumValue))
	}
	if m.ID != 0 {
		n += 1 + sovMyEasyService(uint64(m.ID))
	}
	return n
}

func (m *GetRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMyEasyService(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMyEasyService(uint64(l))
	}
	l = len(m.BizData)
	if l > 0 {
		n += 1 + l + sovMyEasyService(uint64(l))
	}
	return n
}

func (m *SaveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value1)
	if l > 0 {
		n += 1 + l + sovMyEasyService(uint64(l))
	}
	l = len(m.Value2)
	if l > 0 {
		n += 1 + l + sovMyEasyService(uint64(l))
	}
	return n
}

func (m *SaveRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMyEasyService(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMyEasyService(uint64(l))
	}
	return n
}

func sovMyEasyService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMyEasyService(x uint64) (n int) {
	return sovMyEasyService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyEasyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyEasyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Any = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnumValue", wireType)
			}
			m.EnumValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnumValue |= MyDefines(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMyEasyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyEasyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyEasyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyEasyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BizData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyEasyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyEasyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyEasyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyEasyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyEasyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMyEasyService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMyEasyService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMyEasyService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMyEasyService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMyEasyService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMyEasyService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMyEasyService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMyEasyService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMyEasyService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMyEasyService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMyEasyService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMyEasyService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMyEasyService = fmt.Errorf("proto: unexpected end of group")
)
